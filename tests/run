#!/bin/bash

service_wait_time=20

get_config_option() {
    "$location"/tools/get_config_option.py "$@"
}

if [[ $0 == /* ]]; then
    location="${0%/*}/.."
else
    location="$PWD/${0#./}"
    location="${location%/*}/.."
fi

export PYTHONPATH=$PYTHONPATH:$location/osmo

export CONFIG_FILE="$location/config/dev.json"

redis_port=$(get_config_option redis port)
client_port=$(get_config_option client port)
admin_port=$(get_config_option admin port)
media_dir=$(get_config_option paths media_dir)

rm -rf "$media_dir"
mkdir -p "$media_dir"
cp -aT "$location/tests/media" "$media_dir"

mkdir -p "$location/tests/log"

redis-server - > "$location/tests/log/redis" 2>&1 << EOF &
daemonize no
port $redis_port
EOF

admin_pid="$( "$location"/osmo/admin.py > "$location/tests/log/admin" 2>&1 & echo "$!" )"
api_pid="$( "$location"/osmo/client.py > "$location/tests/log/api" 2>&1 & echo "$!" )"
publisher_pid="$( "$location"/osmo/publisher.py > "$location/tests/log/publisher" 2>&1 & echo "$!" )"
monitor_pid="$( redis-cli -p "$redis_port" monitor > "$location/tests/log/monitor" 2>&1 & echo "$!" )"

trap 'kill "$api_pid" "$publisher_pid" "$monitor_pid" "$admin_pid"; redis-cli -p "$redis_port" shutdown' 0

printf 'Waiting %d seconds for services to finish starting...\n\n' "$service_wait_time"
sleep "$service_wait_time"

if [[ $1 == "--manual" ]]; then
    printf 'Client running on port %d.\n' "$client_port"
    printf 'Admin running on port %d.\n' "$admin_port"
    read -rp 'Press enter to finish testing.'
else
    nosetests "$@"
fi
